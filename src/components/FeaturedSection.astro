---
// FeaturesSection.astro dengan animasi yang ditingkatkan
---

<section class="features" id="features">
  <div class="features-container animate-element">
    <div class="features-split-layout">
      <!-- Left Column with Lottie Animation -->
      <div class="lottie-container">
        <dotlottie-player
          src="https://lottie.host/a1a34b9a-1001-4a28-a192-de4e37d56c03/dqxuF484US.lottie"
          background="transparent"
          speed="1"
          loop
          autoplay
          class="lottie-player"
        ></dotlottie-player>
        <div class="glow-effect"></div>
      </div>
      
      <!-- Right Column with Features -->
      <div class="features-content-column">
        <div class="section-header reveal-element">
          <h2 class="animate-title">Company Overview</h2>
          <p class="animate-text">Qualita Indonesia is an excellent technical management company in Indonesia. 
             We provide flexibility and cost-effective approaches of the highest quality 
             process, confidentiality, and on-time delivery.</p>
        </div>
        
        <div class="features-grid">
          <!-- Feature Card 1 -->
          <div class="feature-card reveal-card" data-delay="0">
            <div class="icon-wrapper" style="--icon-color: #4338ca;">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path fill="currentColor" d="M12 2L4.5 20.29l.71.71L12 18l6.79 3l.71-.71L12 2z"/>
              </svg>
            </div>
            <div class="feature-content">
              <h3>MISSION</h3>
              <p>To be a high quality strategic partner</p>
            </div>
          </div>
          
          <!-- Feature Card 2 -->
          <div class="feature-card reveal-card" data-delay="150">
            <div class="icon-wrapper" style="--icon-color: #10b981;">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path fill="currentColor" d="M12 9a3 3 0 0 0-3 3a3 3 0 0 0 3 3a3 3 0 0 0 3-3a3 3 0 0 0-3-3m0 8a5 5 0 0 1-5-5a5 5 0 0 1 5-5a5 5 0 0 1 5 5a5 5 0 0 1-5 5m0-12.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5z"/>
              </svg>
            </div>
            <div class="feature-content">
              <h3>VISION</h3>
              <p>To be an innovative and efficient services company</p>
            </div>
          </div>
          
          <!-- Feature Card 3 -->
          <div class="feature-card reveal-card" data-delay="300">
            <div class="icon-wrapper" style="--icon-color: #f97316;">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path fill="currentColor" d="M12 3L1 9l4 2.18v6L12 21l7-3.82v-6l2-1.09V17h2V9L12 3m6.82 6L12 12.72L5.18 9L12 5.28L18.82 9M17 16l-5 2.72L7 16v-3.73L12 15l5-2.73V16z"/>
              </svg>
            </div>
            <div class="feature-content">
              <h3>VALUE</h3>
              <p>Integrity & continuous improvement</p>
            </div>
          </div>
          
        </div>
      </div>
      
    </div>
    
  </div>
  
  <!-- Parallax circles for modern effect -->
  <div class="parallax-shape shape-1"></div>
  <div class="parallax-shape shape-2"></div>
  <div class="parallax-shape shape-3"></div>
</section>

<style>
  .features {
    padding: 6rem 1rem;
    background: var(--color-features, #f8fafc);
    position: relative;
    overflow: hidden;
  }
  
  .features::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 45%;
    height: 100%;
    background: radial-gradient(circle at top right, rgba(99, 102, 241, 0.08), transparent 70%);
    z-index: 0;
    pointer-events: none;
  }
  
  .features-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0;
    position: relative;
    z-index: 1;
  }
  
  .features-split-layout {
    display: grid;
    grid-template-columns: 1fr 1.2fr;
    gap: 4rem;
    align-items: center;
  }
  
  /* Left Column Styles - Lottie Animation */
  .lottie-container {
    position: relative;
    border-radius: 20px;
    overflow: hidden;
    transition: transform 0.5s var(--easeOutBack);
  }
  
  .lottie-player {
    width: 100%;
    min-height: 400px;
    transform: scale(1.05);
    transition: transform 0.8s ease;
    box-shadow: 0 30px 60px -15px rgba(0, 0, 0, 0.15);
  }
  
  .glow-effect {
    position: absolute;
    bottom: -50px;
    right: -50px;
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background: linear-gradient(45deg, rgba(67, 56, 202, 0.3), rgba(236, 72, 153, 0.3));
    filter: blur(40px);
    opacity: 0;
    transform: scale(0.8);
    transition: all 1.2s var(--easeOutQuart);
    z-index: -1;
  }
  
  /* Right Column Styles */
  .section-header {
    margin-bottom: 2.5rem;
    position: relative;
  }
  
  .animate-title {
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--heading-color, #1e293b);
    margin: 0 0 1.25rem 0;
    position: relative;
    display: inline-block;
    transform: translateY(30px);
    opacity: 0;
    transition: all 0.8s var(--easeOutBack);
  }
  
  .animate-title::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 3px;
    background: linear-gradient(to right, #4338ca, #ec4899);
    border-radius: 3px;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.8s var(--easeOutQuart) 0.4s;
  }
  
  .animate-text {
    font-size: 1.05rem;
    color: #64748b;
    margin: 0;
    max-width: 95%;
    line-height: 1.7;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.8s var(--easeOutQuart) 0.2s;
  }
  
  .features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-top: 2.5rem;
  }
  
  .feature-card {
    background: var(--color-card, white);
    padding: 1.75rem;
    border-radius: 1rem;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.05);
    transition: all 0.5s var(--easeOutBack);
    display: flex;
    align-items: flex-start;
    gap: 1.25rem;
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.04);
    transform: translateY(40px);
    opacity: 0;
  }
  
  .feature-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 0;
    background: var(--icon-color, #4338ca);
    transition: height 0.6s var(--easeOutQuart);
  }
  
  .feature-card:hover {
    transform: translateY(-10px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
  }
  
  .feature-card:hover::before {
    height: 100%;
  }
  
  .icon-wrapper {
    min-width: 50px;
    height: 50px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(var(--icon-color-rgb, 67, 56, 202), 0.1);
    color: var(--icon-color, #4338ca);
    box-shadow: 0 6px 15px rgba(var(--icon-color-rgb, 67, 56, 202), 0.15);
    transition: all 0.5s var(--easeOutBack);
    transform: scale(0.9);
  }

  /* Convert hex colors to RGB for use in CSS variables */
  .icon-wrapper[style*="--icon-color: #4338ca"] {
    --icon-color-rgb: 67, 56, 202;
  }
  
  .icon-wrapper[style*="--icon-color: #10b981"] {
    --icon-color-rgb: 16, 185, 129;
  }
  
  .icon-wrapper[style*="--icon-color: #f97316"] {
    --icon-color-rgb: 249, 115, 22;
  }
  
  .feature-card:hover .icon-wrapper {
    transform: scale(1.1) rotate(5deg);
    box-shadow: 0 12px 24px rgba(var(--icon-color-rgb, 67, 56, 202), 0.25);
  }

  .icon-wrapper svg {
    width: 24px;
    height: 24px;
    filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.1));
    transition: transform 0.5s var(--easeOutBack);
  }
  
  .feature-card:hover .icon-wrapper svg {
    transform: scale(1.1);
    animation: pulseIcon 1.5s infinite alternate ease-in-out;
  }
  
  .feature-content {
    flex: 1;
  }

  .feature-card h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--heading-color, #1e293b);
    margin: 0 0 0.75rem 0;
    letter-spacing: 0.03em;
    position: relative;
    transition: transform 0.4s ease;
  }
  
  .feature-card:hover h3 {
    transform: translateX(5px);
  }

  .feature-card p {
    color: #64748b;
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0;
    transition: transform 0.4s ease 0.1s;
  }
  
  .feature-card:hover p {
    transform: translateX(5px);
  }
  
  /* Parallax shapes */
  .parallax-shape {
    position: absolute;
    border-radius: 50%;
    filter: blur(20px);
    z-index: 0;
    pointer-events: none;
    opacity: 0;
    transition: opacity 1.5s var(--easeOutQuart);
  }
  
  .shape-1 {
    width: 200px;
    height: 200px;
    top: 15%;
    left: -100px;
    background: linear-gradient(45deg, rgba(67, 56, 202, 0.2), rgba(99, 102, 241, 0.1));
  }
  
  .shape-2 {
    width: 300px;
    height: 300px;
    bottom: -150px;
    right: 20%;
    background: linear-gradient(45deg, rgba(236, 72, 153, 0.15), rgba(244, 114, 182, 0.1));
  }
  
  .shape-3 {
    width: 150px;
    height: 150px;
    top: 20%;
    right: 10%;
    background: linear-gradient(45deg, rgba(249, 115, 22, 0.15), rgba(251, 146, 60, 0.1));
  }
  
  /* Custom Animation Variables */
  :root {
    --easeOutBack: cubic-bezier(0.34, 1.56, 0.64, 1);
    --easeOutQuart: cubic-bezier(0.25, 1, 0.5, 1);
  }

  /* Animation Classes */
  @keyframes pulseIcon {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(1.15);
    }
  }
  
  /* Scroll reveal animation will be handled by JS */
  .reveal-element.is-visible .animate-title {
    opacity: 1;
    transform: translateY(0);
  }
  
  .reveal-element.is-visible .animate-title::after {
    transform: scaleX(1);
  }
  
  .reveal-element.is-visible .animate-text {
    opacity: 1;
    transform: translateY(0);
  }
  
  .reveal-element.is-visible .glow-effect {
    opacity: 0.7;
    transform: scale(1);
  }
  
  .reveal-card.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* When section is visible, show parallax shapes */
  .features.is-in-viewport .parallax-shape {
    opacity: 1;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .features-split-layout {
      grid-template-columns: 1fr;
      gap: 4rem;
    }
    
    .lottie-container {
      order: 1;
      max-width: 600px;
      margin: 0 auto;
    }
    
    .features-content-column {
      order: 2;
    }
    
    .section-header {
      text-align: center;
      max-width: 100%;
    }
    
    .section-header p {
      margin: 0 auto;
    }
    
    .animate-title::after {
      left: 50%;
      transform: translateX(-50%) scaleX(0);
    }
    
    .reveal-element.is-visible .animate-title::after {
      transform: translateX(-50%) scaleX(1);
    }
  }

  @media (max-width: 768px) {
    .features {
      padding: 4rem 1rem;
    }
    
    .features-grid {
      grid-template-columns: 1fr;
    }
    
    .animate-title {
      font-size: 1.75rem;
    }
    
    .lottie-player {
      min-height: 300px;
    }
    
    .parallax-shape {
      opacity: 0.4; /* Reduce opacity on mobile for better text readability */
    }
  }
  
  @media (max-width: 480px) {
    .feature-card {
      padding: 1.5rem;
      gap: 1rem;
    }
    
    .icon-wrapper {
      min-width: 40px;
      height: 40px;
    }
    
    .parallax-shape {
      display: none; /* Hide on smallest screens for better performance */
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Intersection Observer for reveal animations
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px 0px -100px 0px'
    };
    
    // Observer for the whole section
    const sectionObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-in-viewport');
          // Once the section is visible, we don't need to observe it anymore
          sectionObserver.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    // Observe the features section
    const featuresSection = document.querySelector('.features');
    if (featuresSection) {
      sectionObserver.observe(featuresSection);
    }
    
    // Observer for elements that should reveal on scroll
    const elementObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
          // Once the element is visible, we don't need to observe it anymore
          elementObserver.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    // Observe all elements with reveal-element class
    const revealElements = document.querySelectorAll('.reveal-element');
    revealElements.forEach(element => {
      elementObserver.observe(element);
    });
    
    // Handle card reveals with delay
    const cardObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Get data-delay attribute or default to 0
          const delay = entry.target.getAttribute('data-delay') || 0;
          
          // Set a timeout based on the delay
          setTimeout(() => {
            entry.target.classList.add('is-visible');
          }, parseInt(delay));
          
          // Once the card is processed, we don't need to observe it anymore
          cardObserver.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    // Observe all cards
    const revealCards = document.querySelectorAll('.reveal-card');
    revealCards.forEach(card => {
      cardObserver.observe(card);
    });
    
    // Parallax effect on shapes when scrolling
    let shapes = document.querySelectorAll('.parallax-shape');
    
    window.addEventListener('scroll', () => {
      const scrollPosition = window.scrollY;
      
      shapes.forEach((shape, index) => {
        // Different factor for each shape to create varied movement
        const factor = (index + 1) * 0.05;
        
        // Different direction based on index
        const direction = index % 2 === 0 ? 1 : -1;
        
        // Apply transform
        shape.style.transform = `translate(${scrollPosition * factor * direction}px, ${scrollPosition * factor * 0.5}px)`;
      });
    });
    
    // Handle mouse movement for subtle parallax effect
    featuresSection.addEventListener('mousemove', (e) => {
      // Only apply if screen is large enough
      if (window.innerWidth > 1024) {
        // Get mouse position relative to the container
        const mouseX = e.clientX / window.innerWidth - 0.5;
        const mouseY = e.clientY / window.innerHeight - 0.5;
        
        // Apply subtle movements to lottie player
        const lottiePlayer = document.querySelector('.lottie-player');
        if (lottiePlayer) {
          lottiePlayer.style.transform = `scale(1.05) translate(${mouseX * 20}px, ${mouseY * 20}px)`;
        }
        
        // Apply different movement to each shape
        shapes.forEach((shape, index) => {
          const factor = (index + 2) * 15;
          shape.style.transform = `translate(${mouseX * factor}px, ${mouseY * factor}px)`;
        });
      }
    });
  });
</script>